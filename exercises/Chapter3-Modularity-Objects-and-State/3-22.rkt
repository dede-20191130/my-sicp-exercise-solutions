#lang racket
(require compatibility/mlist)

(define (print-line value) 
  (display value) 
  (newline))

(define (make-queue)
  (let ((front-ptr (mlist))
        (rear-ptr (mlist)))
    ;    <definitions of internal procedures>
    (define (queue-content)
      (cons front-ptr rear-ptr))
    (define (set-front-ptr! item)
      (set! front-ptr item))
    (define (set-rear-ptr! item)
      (set! rear-ptr item))
    (define (empty-queue?) (null? front-ptr))
    (define (front-queue)
      (if (empty-queue?)
          (error "FRONT called with an empty queue" (queue-content))
          (mcar front-ptr)))
    (define (insert-queue! item)
      (let ((new-mpair (mcons item '())))
        (cond ((empty-queue?)
               (set-front-ptr! new-mpair)
               (set-rear-ptr! new-mpair)
               dispatch)
              (else
               (set-mcdr! rear-ptr new-mpair)
               (set-rear-ptr! new-mpair)
               dispatch))))
    (define (delete-queue!)
      (cond ((empty-queue?)
             (error "DELETE! called with an empty queue" (queue-content)))
            (else
             (set-front-ptr! (mcdr front-ptr))
             dispatch))) 
    (define (print-queue)
      (define (iter mlst)
        (cond ((null? mlst) (display ")"))
              ((eq? mlst rear-ptr)
               (display (mcar mlst))
               (display ")"))
              (else (begin
                      (display (mcar mlst))
                      (display ", ")
                      (iter (mcdr mlst))))))
      (display "(")
      (iter front-ptr)
      (newline))
    (define (dispatch m)
      (cond ((eq? m 'front-queue) (front-queue))
            ((eq? m 'insert-queue!) insert-queue!)
            ((eq? m 'delete-queue!) (delete-queue!))
            ((eq? m 'print-queue) (print-queue))))

    dispatch))

(define (front-queue q)
  (q 'front-queue))
  
(define (insert-queue! q item)
  ((q 'insert-queue!) item))

(define (delete-queue! q)
  (q 'delete-queue!))

(define (print-queue q)
  (q 'print-queue))
      
(define q1 (make-queue))
(print-queue q1)
(print-line "-------------------")
(insert-queue! q1 'a)
(print-queue q1)
(print-line "-------------------")
(insert-queue! q1 'b)
(print-queue q1)
(print-line "-------------------")
(insert-queue! q1 'foo)
(print-queue q1)
(print-line "-------------------")
(delete-queue! q1)
(print-queue q1)
(print-line "-------------------")
(delete-queue! q1)
(print-queue q1)
(print-line "-------------------")
(delete-queue! q1)
(print-queue q1)
(print-line "-------------------")
(insert-queue! q1 'next-a)
(print-queue q1)
(print-line "-------------------")
(insert-queue! q1 'next-b)
(print-queue q1)
(print-line "-------------------")
(delete-queue! q1)
(print-queue q1)
(print-line "-------------------")
