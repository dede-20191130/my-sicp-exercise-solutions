#lang sicp

(define (make-semaphore-in-terms-of-mutexes n)
  (define (create-mutexes cnt)
    (if (= cnt 0)
        '()
        (cons (make-mutex) (create-mutexes (- n 1)))))
  (define (rotate-list! tgt-list)
    (define (iter curr-pointer)
      (if (null? (cdr curr-pointer))
          (set-cdr! curr-pointer tgt-list)
          (iter (cdr curr-pointer))))
    (iter tgt-list))
  (let ((mutexes (create-mutexes n)))
    (rotate-list! mutexes)
    (let ((acquire-pointer mutexes)
          (release-pointer mutexes))
      (define (the-semaphore m)
        
        (cond ((eq? m 'acquire)
               (let ((this-point acquire-pointer))
                 (set! acquire-pointer (cdr acquire-pointer))
                 ((car this-point) 'acquire)))
               
              ((eq? m 'release)
               (let ((this-point release-pointer))
                 (set! release-pointer (cdr release-pointer))
                 ((car this-point) 'release)))))
      the-semaphore)))
