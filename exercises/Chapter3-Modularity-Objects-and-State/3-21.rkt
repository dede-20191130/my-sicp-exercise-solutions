#lang racket
(require compatibility/mlist)

(define (print-line value) 
  (display value) 
  (newline))

(define (front-ptr queue) (mcar queue))
(define (rear-ptr queue) (mcdr queue))
(define (set-front-ptr! queue item) (set-mcar! queue item))
(define (set-rear-ptr! queue item) (set-mcdr! queue item))
(define (empty-queue? queue) (null? (front-ptr queue)))
(define (make-queue) (mcons '() '()))
(define (front-queue queue)
  (if (empty-queue? queue)
      (error "FRONT called with an empty queue" queue)
      (mcar (front-ptr queue))))
(define (insert-queue! queue item)
  (let ((new-mpair (mcons item '())))
    (cond ((empty-queue? queue)
           (set-front-ptr! queue new-mpair)
           (set-rear-ptr! queue new-mpair)
           queue)
          (else
           (set-mcdr! (rear-ptr queue) new-mpair)
           (set-rear-ptr! queue new-mpair)
           queue)))) 
(define (delete-queue! queue)
  (cond ((empty-queue? queue)
         (error "DELETE! called with an empty queue" queue))
        (else
         (set-front-ptr! queue (mcdr (front-ptr queue)))
         queue))) 
(define (print-queue queue)
  (define (iter mlst)
    (cond ((null? mlst) (display ")"))
          ((eq? mlst (rear-ptr queue))
           (display (mcar mlst))
           (display ")"))
          (else (begin
                  (display (mcar mlst))
                  (display ", ")
                  (iter (mcdr mlst))))))
  (display "(")
  (iter (front-ptr queue))
  (newline))
  

(define q1 (make-queue))
(print-queue q1)
(print-line "-------------------")
(insert-queue! q1 'a)
(print-queue q1)
(print-line "-------------------")
(insert-queue! q1 'b)
(print-queue q1)
(print-line "-------------------")
(insert-queue! q1 'foo)
(print-queue q1)
(print-line "-------------------")
(delete-queue! q1)
(print-queue q1)
(print-line "-------------------")
(delete-queue! q1)
(print-queue q1)
(print-line "-------------------")
(delete-queue! q1)
(print-queue q1)
(print-line "-------------------")
(insert-queue! q1 'next-a)
(print-queue q1)
(print-line "-------------------")
(insert-queue! q1 'next-b)
(print-queue q1)
(print-line "-------------------")
(delete-queue! q1)
(print-queue q1)
(print-line "-------------------")
